// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: codes.sql

package db

import (
	"context"
	"database/sql"
)

const banCode = `-- name: BanCode :one
UPDATE codes SET
  banned = $1,
  banned_reason = $2
WHERE code = $3
RETURNING code, phone, email, birthday, name_surname, address, city_code, registered_date, ip, active, banned, banned_reason, tc_no, used
`

type BanCodeParams struct {
	Banned       bool
	BannedReason sql.NullString
	Code         string
}

func (q *Queries) BanCode(ctx context.Context, arg BanCodeParams) (Code, error) {
	row := q.db.QueryRowContext(ctx, banCode, arg.Banned, arg.BannedReason, arg.Code)
	var i Code
	err := row.Scan(
		&i.Code,
		&i.Phone,
		&i.Email,
		&i.Birthday,
		&i.NameSurname,
		&i.Address,
		&i.CityCode,
		&i.RegisteredDate,
		&i.Ip,
		&i.Active,
		&i.Banned,
		&i.BannedReason,
		&i.TcNo,
		&i.Used,
	)
	return i, err
}

const createCode = `-- name: CreateCode :one
INSERT INTO codes (
  code
) VALUES (
  $1
) RETURNING code, phone, email, birthday, name_surname, address, city_code, registered_date, ip, active, banned, banned_reason, tc_no, used
`

func (q *Queries) CreateCode(ctx context.Context, code string) (Code, error) {
	row := q.db.QueryRowContext(ctx, createCode, code)
	var i Code
	err := row.Scan(
		&i.Code,
		&i.Phone,
		&i.Email,
		&i.Birthday,
		&i.NameSurname,
		&i.Address,
		&i.CityCode,
		&i.RegisteredDate,
		&i.Ip,
		&i.Active,
		&i.Banned,
		&i.BannedReason,
		&i.TcNo,
		&i.Used,
	)
	return i, err
}

const deleteCodes = `-- name: DeleteCodes :exec
DELETE FROM codes
`

func (q *Queries) DeleteCodes(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteCodes)
	return err
}

const getCode = `-- name: GetCode :one
SELECT code, phone, email, birthday, name_surname, address, city_code, registered_date, ip, active, banned, banned_reason, tc_no, used FROM codes WHERE code = $1
`

func (q *Queries) GetCode(ctx context.Context, code string) (Code, error) {
	row := q.db.QueryRowContext(ctx, getCode, code)
	var i Code
	err := row.Scan(
		&i.Code,
		&i.Phone,
		&i.Email,
		&i.Birthday,
		&i.NameSurname,
		&i.Address,
		&i.CityCode,
		&i.RegisteredDate,
		&i.Ip,
		&i.Active,
		&i.Banned,
		&i.BannedReason,
		&i.TcNo,
		&i.Used,
	)
	return i, err
}

const getUsedCodes = `-- name: GetUsedCodes :many
SELECT code, phone, email, birthday, name_surname, address, city_code, registered_date, ip, active, banned, banned_reason, tc_no, used FROM codes WHERE used = true and banned = false ORDER BY registered_date DESC
`

func (q *Queries) GetUsedCodes(ctx context.Context) ([]Code, error) {
	rows, err := q.db.QueryContext(ctx, getUsedCodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Code
	for rows.Next() {
		var i Code
		if err := rows.Scan(
			&i.Code,
			&i.Phone,
			&i.Email,
			&i.Birthday,
			&i.NameSurname,
			&i.Address,
			&i.CityCode,
			&i.RegisteredDate,
			&i.Ip,
			&i.Active,
			&i.Banned,
			&i.BannedReason,
			&i.TcNo,
			&i.Used,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCode = `-- name: UpdateCode :one
UPDATE codes SET
  phone = $1,
  email = $2,
  birthday = $3,
  name_surname = $4,
  address = $5,
  city_code = $6,
  registered_date = $7,
  ip = $8,
  active = $9,
  tc_no = $10,
  used = $11
WHERE code = $12
RETURNING code, phone, email, birthday, name_surname, address, city_code, registered_date, ip, active, banned, banned_reason, tc_no, used
`

type UpdateCodeParams struct {
	Phone          sql.NullString
	Email          sql.NullString
	Birthday       sql.NullTime
	NameSurname    sql.NullString
	Address        sql.NullString
	CityCode       sql.NullInt32
	RegisteredDate sql.NullTime
	Ip             sql.NullString
	Active         bool
	TcNo           sql.NullString
	Used           bool
	Code           string
}

func (q *Queries) UpdateCode(ctx context.Context, arg UpdateCodeParams) (Code, error) {
	row := q.db.QueryRowContext(ctx, updateCode,
		arg.Phone,
		arg.Email,
		arg.Birthday,
		arg.NameSurname,
		arg.Address,
		arg.CityCode,
		arg.RegisteredDate,
		arg.Ip,
		arg.Active,
		arg.TcNo,
		arg.Used,
		arg.Code,
	)
	var i Code
	err := row.Scan(
		&i.Code,
		&i.Phone,
		&i.Email,
		&i.Birthday,
		&i.NameSurname,
		&i.Address,
		&i.CityCode,
		&i.RegisteredDate,
		&i.Ip,
		&i.Active,
		&i.Banned,
		&i.BannedReason,
		&i.TcNo,
		&i.Used,
	)
	return i, err
}
